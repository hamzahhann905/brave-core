diff --git a/storage/browser/quota/quota_settings.cc b/storage/browser/quota/quota_settings.cc
index d5f67095528e4be675268550662115aa0d5adabd..36800054df816704d504af79694dc580e617aed6 100644
--- a/storage/browser/quota/quota_settings.cc
+++ b/storage/browser/quota/quota_settings.cc
@@ -33,33 +33,6 @@ int64_t RandomizeByPercent(int64_t value, int percent) {
   return value + (value * (random_percent / 100.0));
 }
 
-QuotaSettings CalculateIncognitoDynamicSettings(
-    int64_t physical_memory_amount) {
-  // The incognito pool size is a fraction of the amount of system memory,
-  // and the amount is capped to a hard limit.
-  double incognito_pool_size_ratio = 0.1;  // 10%
-  int64_t max_incognito_pool_size = 300 * kMBytes;
-  if (base::FeatureList::IsEnabled(features::kIncognitoDynamicQuota)) {
-    const double lower_bound = features::kIncognitoQuotaRatioLowerBound.Get();
-    const double upper_bound = features::kIncognitoQuotaRatioUpperBound.Get();
-    incognito_pool_size_ratio =
-        lower_bound + (base::RandDouble() * (upper_bound - lower_bound));
-    max_incognito_pool_size = std::numeric_limits<int64_t>::max();
-  } else {
-    max_incognito_pool_size =
-        RandomizeByPercent(max_incognito_pool_size, kRandomizedPercentage);
-  }
-
-  QuotaSettings settings;
-  settings.pool_size = std::min(
-      max_incognito_pool_size,
-      static_cast<int64_t>(physical_memory_amount * incognito_pool_size_ratio));
-  settings.per_host_quota = settings.pool_size / 3;
-  settings.session_only_per_host_quota = settings.per_host_quota;
-  settings.refresh_interval = base::TimeDelta::Max();
-  return settings;
-}
-
 base::Optional<QuotaSettings> CalculateNominalDynamicSettings(
     const base::FilePath& partition_path,
     bool is_incognito,
@@ -67,11 +40,6 @@ base::Optional<QuotaSettings> CalculateNominalDynamicSettings(
   base::ScopedBlockingCall scoped_blocking_call(FROM_HERE,
                                                 base::BlockingType::MAY_BLOCK);
 
-  if (is_incognito) {
-    return CalculateIncognitoDynamicSettings(
-        device_info_helper->AmountOfPhysicalMemory());
-  }
-
   // The fraction of the device's storage the browser is willing to use for
   // temporary storage.
   const double kTemporaryPoolSizeRatio =
